// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package cuessz

// TypeDefinition is a single structure that represents all possible SSZ types.
// The 'kind' field determines which other fields are populated.
// This design avoids union types which don't translate well to Go.
type TypeDefinition struct {
	// Discriminator field - determines which fields below are relevant
	Kind string `json:"kind"`

	// Basic type field (populated when kind == "basic")
	Type string `json:"type,omitempty"`

	// Container fields (populated when kind == "container")
	Fields []Field `json:"fields,omitempty"`

	// Vector and List element type (populated when kind == "vector" or "list")
	Elem *TypeDefinition `json:"elem,omitempty"`

	// Vector length (populated when kind == "vector")
	Length int64 `json:"length,omitempty"`

	// List and Bitlist max length (populated when kind == "list" or "bitlist")
	MaxLength int64 `json:"maxLength,omitempty"`

	// Union options (populated when kind == "union")
	Options []*TypeDefinition `json:"options,omitempty"`

	// Optional description for documentation
	Description string `json:"description,omitempty"`

	// Language-specific extensions
	Extensions TypeExtensions `json:"extensions,omitempty"`

	// Progressive container support (EIP-7495)
	// Indicates if this is a stable container that supports future extensions
	Stable bool `json:"stable,omitempty"`

	// Active fields pattern for progressive containers (EIP-7495)
	// Specifies which merkle tree positions contain actual fields (0 = skip, 1 = field present)
	// - Length can be up to 256
	// - Count of 1s must equal number of fields in the container
	// - Last element must be 1 if present (cannot end in 0)
	// Example: [1, 0, 1] means field 0 at merkle index 0, field 1 at merkle index 2
	Active_fields []int64 `json:"active_fields,omitempty"`
}

// Field represents a named field in a container
type Field struct {
	Name string `json:"name"`

	Type *TypeDefinition `json:"type"`

	// Optional description for documentation
	Description string `json:"description,omitempty"`

	// Language-specific extensions
	Extensions TypeExtensions `json:"extensions,omitempty"`
}

// Type-level extensions for language-specific code generation
type TypeExtensions struct {
	Go GoTypeExtension `json:"go,omitempty"`
}

// Type-level Go extensions for individual types and fields
type GoTypeExtension struct {
	// Custom type name (if different from schema name)
	Name string `json:"name,omitempty"`

	// Import package for external types (used with name)
	Import string `json:"import,omitempty"`

	// Additional struct tags
	Tags map[string]string `json:"tags,omitempty"`
}

// Schema-level Go extensions for package configuration
type GoSchemaExtension struct {
	// Package name for generated Go code
	Package string `json:"package,omitempty"`

	// Import path for the package
	ImportPath string `json:"importPath,omitempty"`

	// Import alias for external packages
	Alias string `json:"alias,omitempty"`
}

// Schema-level extensions for language-specific code generation
type SchemaExtensions struct {
	Go GoSchemaExtension `json:"go,omitempty"`
}

// Schema represents a collection of named type definitions
type Schema struct {
	// Schema version for compatibility tracking
	Version string `json:"version"`

	// Named type definitions
	Types map[string]TypeDefinition `json:"types"`

	// Optional metadata
	Metadata struct {
		Namespace string `json:"namespace,omitempty"`

		Description string `json:"description,omitempty"`

		Authors []string `json:"authors,omitempty"`
	} `json:"metadata,omitempty"`

	// Language-specific extensions for code generation
	Extensions SchemaExtensions `json:"extensions,omitempty"`
}
